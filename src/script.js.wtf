// Include bsv-wasm using a module import, script tag, or your preferred method


import init, { P2PKHAddress, PrivateKey, Script, Transaction, TxIn, TxOut } from "bsv-wasm-web";
import { Sigma } from "sigma-protocol/dist/index.modern.js";

const MAP_PREFIX = "1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5";
const B_PREFIX = "19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut";
const BAP_PREFIX = "1BAPSuaPnfGnSBM3GLV9yhxUdYe4vGbdMT";

let tx = null;
let data = [];
let utxos = [];

document.getElementById('template-bid').addEventListener('click', function() {
  var jsonInput = document.getElementById('jsonInput');
  try {
    var parsedData = JSON.parse(jsonInput.value);
    parsedData.data = [BAP_PREFIX, "ID", "3SyWUZXvhidNcEHbAC3HkBnKoD2Q", "1K4c6YXR1ixNLAqrL8nx5HUQAPKbACTwDo", "|"]; // TODO: sign with AIP
    jsonInput.value = JSON.stringify(parsedData, null, 2);
  } catch (e) {
      console.error("Error parsing JSON: ", e);
  }
});

document.getElementById('template-post').addEventListener('click', function() {
  var jsonInput = document.getElementById('jsonInput');
  try {
      var parsedData = JSON.parse(jsonInput.value);
    parsedData.data = [B_PREFIX, "my post content here", "text/markdown", "utf-8", "|", MAP_PREFIX, "SET", "app", "htmx-pay", "type", "post"];

    jsonInput.value = JSON.stringify(parsedData, null, 2);
  } catch (e) {
      console.error("Error parsing JSON: ", e);
  }
});

document.getElementById('template-message').addEventListener('click', function() {
  var jsonInput = document.getElementById('jsonInput');
  try {
      var parsedData = JSON.parse(jsonInput.value);
    parsedData.data = [B_PREFIX, "my message content here", "text/markdown", "utf-8", "|", MAP_PREFIX, "SET", "app", "htmx-pay", "type", "message"];

    jsonInput.value = JSON.stringify(parsedData, null, 2);
  } catch (e) {
      console.error("Error parsing JSON: ", e);
  }
});

document.getElementById('createTransaction').addEventListener('click', function() {
  var jsonInput = document.getElementById('jsonInput').value;
  try {
      var parsedData = JSON.parse(jsonInput);
      createTransaction(parsedData.data);
  } catch (e) {
      console.error("Error parsing JSON: ", e);
  }
});

document.getElementById('fetchUtxos').addEventListener('click', async function() {
  var jsonInput = document.getElementById('jsonInput').value;
  try {
      var parsedData = JSON.parse(jsonInput);

      const address = P2PKHAddress.from_pubkey(PrivateKey.from_wif(parsedData.pay[0].key).to_public_key())
      console.log("Fetching utxos for", address.to_string());

      const resp = await fetch(`https://api.whatsonchain.com/v1/bsv/main/address/${address.to_string()}/unspent`);
      const u = await resp.json();
      console.log("got utxos: ", u);
      if (u && u.length > 0) {
        utxos = u.map((utxo) => ({
            ...utxo,
            selected: false
        }))
      }

      const utxoElement = document.querySelector('#utxos');
      utxoElement.innerHTML = u.map((utxo) => {
        // this needs to be a checkbox
        return `<div class="flex items-center gap-2"><input type="checkbox" name="utxo" ${utxo.selected ? 'checked' : ''} value="${utxo.tx_hash}:${utxo.tx_pos}">${utxo.tx_hash}:${utxo.tx_pos} ${utxo.value}</div>`;
      }).join("");

  } catch (e) {
      console.error("Error parsing JSON: ", e);
  }
});

document.getElementById('selectUtxos').addEventListener('click', async function() {
  let u = utxos
  if (u.length > 0) {
    const utxo = u[0];
    const tx = new Transaction(1, 0);
    tx.add_input(new TxIn(utxo.tx_hash, utxo.tx_pos, address.get_locking_script()));
    console.log("todo - subtract fee", BigInt(utxo.value) - BigInt(1000));

    tx.add_output(new TxOut(BigInt(utxo.value), address.get_locking_script()));
    console.log("respo: ", tx.to_hex());

    const signElement = document.querySelector('#sign');
    txElement.innerHTML = tx.to_hex();
  } else {
    console.log("No utxos found for this address");
    const utxoElement = document.querySelector('#utxos');
    utxoElement.innerHTML = `No utxos found for this address. Send coins to ${address.to_string()}`;
  }
});

document.getElementById('signTransaction').addEventListener('click', function() {
  var jsonInput = document.getElementById('jsonInput').value;
  try {
      var parsedData = JSON.parse(jsonInput);
      signTransaction(parsedData.sign);
  } catch (e) {
      console.error("Error parsing JSON: ", e);
  }
});

function signTransaction({ algo, key, message }) {
  console.log("signing transaction with data: ", algo, key, message);
  
  const txOut = new TxOut(BigInt(0), tx.get_output(0).get_locking_script());
  tx.add_output(txOut);
  
  const sigma = new Sigma(tx);
  
  const { signedTx } = sigma.sign(privateKey);

  const txElement = document.querySelector('#transaction3');
  
}

function createTransaction(d) {
  console.log("creating transaction with data: ", d);
  data = d;

  // save the movified pay
  updatePay();

  try {
    tx = new Transaction(1, 0);
    const textEncoder = new TextEncoder(); // Create a new TextEncoder instance

    // Join the data, encode it, and then convert to a hex string
    const encodedData = textEncoder.encode(data.join(""));
    const hexString = Array.from(encodedData, byte => byte.toString(16).padStart(2, '0')).join(" ");

    tx.add_output(new TxOut(BigInt(0), Script.from_asm_string(`OP_0 OP_RETURN ${hexString}`)));
    console.log("respo: ", tx.to_hex());

    const txElement = document.querySelector('#transaction');
    txElement.innerHTML = tx.to_hex();
  } catch (e) {
    console.error("Error creating databutton: ", e);
  }
}

document.addEventListener('DOMContentLoaded', async () => {
  console.log("DOM loaded");

  await init();
  
  // generate a key
  
  const jsonInput = document.querySelector('#jsonInput');
  const json = JSON.parse(jsonInput.value);

  let pay = getPay()
  json.pay = pay;
  jsonInput.value = JSON.stringify(json, null, 2);
  const debug = document.querySelector('.debug')
  debug.innerText = key.to_wif();
})

function updatePay() {
  const jsonInput = document.querySelector('#jsonInput');
  const json = JSON.parse(jsonInput.value);
  localStorage.setItem('transactionous-pay', JSON.stringify(json.pay));
}

function getPay() {
  let storagePay = localStorage.getItem('transactionous-pay');
  let pay;
  if (storagePay) {
    pay = JSON.parse(storagePay);
  } else {
    let key = PrivateKey.from_random();
    pay = [{ key: key.to_wif() }];
    localStorage.setItem('transactionous-pay', JSON.stringify(pay));
  }
  return pay;
}